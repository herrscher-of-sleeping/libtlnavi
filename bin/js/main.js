// Generated by Haxe 4.3.6
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Graph = function(vertices) {
	this.weights = [];
	this.edges = [];
	var _g = 0;
	var _g1 = vertices + 1;
	while(_g < _g1) {
		var i = _g++;
		this.edges.push([]);
		this.weights.push([]);
	}
};
Graph.__name__ = true;
Graph.prototype = {
	addEdge: function(i,j,weight,scan) {
		if(scan == null) {
			scan = false;
		}
		if(scan) {
			var posI = this.edges[i].indexOf(j);
			var posJ = this.edges[j].indexOf(i);
			if(posI != -1) {
				this.weights[i][posI] = weight;
				this.weights[j][posJ] = weight;
				return;
			}
		}
		haxe_Log.trace("" + this.edges.length + ", " + this.edges[i].length + ", " + i + ", " + j,{ fileName : "src/Graph.hx", lineNumber : 24, className : "Graph", methodName : "addEdge"});
		this.edges[i].push(j);
		this.weights[i].push(weight);
		this.edges[j].push(i);
		this.weights[j].push(weight);
	}
	,clone: function() {
		var g = new Graph(this.edges.length);
		var _this = this.edges;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].slice();
		}
		g.edges = result;
		var _this = this.weights;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].slice();
		}
		g.weights = result;
		return g;
	}
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var args = process.argv.slice(2);
	var tlGeojsonPath = args[0];
	process.stdout.write(Std.string("tlGeojsonPath: " + tlGeojsonPath));
	process.stdout.write("\n");
	if(tlGeojsonPath == null) {
		process.stdout.write("Usage: tl-navi translocators.geojson");
		process.stdout.write("\n");
		process.exit(1);
	}
	var fileContents = js_node_Fs.readFileSync(tlGeojsonPath,{ encoding : "utf8"});
	var tlGeojson = JSON.parse(fileContents);
	var g = Main_buildGraph(tlGeojson,{ translocatorWeight : 100, from : new GamePoint(0,0), to : new GamePoint(100000,0), initialTranslocatorQuerySize : 1000});
	g.addEdge(1,2,123);
	var g2 = g.clone();
};
function Main_makePoint(point) {
	return new GamePoint(point[0],-point[1]);
}
function Main_buildGraph(tlGeojson,config) {
	var graph = new Graph(tlGeojson.features.length * 2 + 2);
	var tlWeight = config.translocatorWeight;
	var quadTree = new QuadTree(new AABB(new GamePoint(0,0),1050000),10);
	var flatPointListById = [];
	var _g = 0;
	var _g1 = tlGeojson.features.length;
	while(_g < _g1) {
		var i = _g++;
		var tlId0 = i * 2;
		var tlId1 = tlId0 + 1;
		var pt0 = Main_makePoint(tlGeojson.features[i].geometry.coordinates[0]);
		var pt1 = Main_makePoint(tlGeojson.features[i].geometry.coordinates[1]);
		graph.addEdge(tlId0,tlId1,tlWeight);
		graph.addEdge(tlId1,tlId0,tlWeight);
		flatPointListById.push(pt0);
		flatPointListById.push(pt1);
		quadTree.insert(pt0,tlId0);
		quadTree.insert(pt1,tlId1);
	}
	var size = config.initialTranslocatorQuerySize;
	var halfsize = Math.floor(size / 2);
	var _g = 0;
	var _g1 = flatPointListById.length;
	while(_g < _g1) {
		var id = _g++;
		var queryResults = [];
		var pt = flatPointListById[id];
		quadTree.queryRange(new AABB(new GamePoint(pt.x - halfsize,pt.y - halfsize),size),queryResults);
		if(queryResults.length < 10) {
			queryResults = [];
			halfsize = size * 4;
			quadTree.queryRange(new AABB(new GamePoint(pt.x - halfsize,pt.y - halfsize),size),queryResults);
		}
		var _g2 = 0;
		while(_g2 < queryResults.length) {
			var result = queryResults[_g2];
			++_g2;
			if(result.id != id) {
				graph.addEdge(id,result.id,pt.dist(result.point),true);
			}
		}
	}
	var startPointId = tlGeojson.features.length * 2 + 1;
	var endPointId = startPointId + 1;
	graph.addEdge(startPointId,endPointId,config.from.dist(config.to));
	var queryResults = [];
	quadTree.queryRange(new AABB(new GamePoint(config.from.x - halfsize,config.from.y - halfsize),size),queryResults);
	var _g = 0;
	var _g1 = queryResults.length;
	while(_g < _g1) {
		var i = _g++;
		graph.addEdge(startPointId,queryResults[i].id,config.from.dist(queryResults[i].point));
	}
	queryResults = [];
	quadTree.queryRange(new AABB(new GamePoint(config.to.x - halfsize,config.to.y - halfsize),size),queryResults);
	var _g = 0;
	var _g1 = queryResults.length;
	while(_g < _g1) {
		var i = _g++;
		graph.addEdge(endPointId,queryResults[i].id,config.to.dist(queryResults[i].point));
	}
	return graph;
}
Math.__name__ = true;
var Point = function(x,y,z) {
	this.x = x;
	this.y = y;
	this.z = z;
};
Point.__name__ = true;
Point.prototype = {
	create: function(x,y,z) {
		return new Point(x,y,z);
	}
	,toString: function() {
		return "Point[" + this.x + ", " + this.y + "]";
	}
	,dist: function(other) {
		var squared = Math.pow(this.x - other.x,2) + Math.pow(this.y - other.y,2);
		return Math.pow(squared,0.5);
	}
};
var MapPoint = function(x,y,z) {
	Point.call(this,x,y,z);
};
MapPoint.__name__ = true;
MapPoint.__super__ = Point;
MapPoint.prototype = $extend(Point.prototype,{
	toGamePoint: function() {
		return new GamePoint(this.x,-this.y,this.z);
	}
	,create: function(x,y,z) {
		return new MapPoint(x,y,z);
	}
});
var GamePoint = function(x,y,z) {
	Point.call(this,x,y,z);
};
GamePoint.__name__ = true;
GamePoint.__super__ = Point;
GamePoint.prototype = $extend(Point.prototype,{
	toMapPoint: function() {
		return new MapPoint(this.x,-this.y,this.z);
	}
	,create: function(x,y,z) {
		return new GamePoint(x,y,z);
	}
});
var AABB = function(start,size) {
	this.start = start;
	this.end = new Point(start.x + size,start.y + size);
	this.size = size;
	this.center = new Point(Math.floor((start.x + this.end.x) / 2),Math.floor((start.y + this.end.y) / 2));
};
AABB.__name__ = true;
AABB.prototype = {
	containsPoint: function(point) {
		if(point.x >= this.start.x && point.x < this.end.x && point.y >= this.start.y) {
			return point.y < this.end.y;
		} else {
			return false;
		}
	}
	,intersectsAABB: function(other) {
		if(this.start.x <= other.end.x && this.end.x >= other.start.x && this.start.y <= other.end.y) {
			return this.end.y >= other.start.y;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "AABB[" + this.start.x + ", " + this.start.y + ", " + this.end.x + ", " + this.end.y + "]";
	}
};
var QuadTree = function(boundary,nodeCapacity) {
	this.subtrees = null;
	this.ids = [];
	this.points = [];
	this.boundary = boundary;
	this.nodeCapacity = nodeCapacity;
};
QuadTree.__name__ = true;
QuadTree.prototype = {
	subdivide: function() {
		var topCenter = this.boundary.center.create(this.boundary.center.x,this.boundary.start.y);
		var leftCenter = this.boundary.center.create(this.boundary.start.x,this.boundary.center.y);
		var halfSize = Math.floor(this.boundary.size / 2);
		return { NW : new QuadTree(new AABB(this.boundary.start,halfSize),this.nodeCapacity), NE : new QuadTree(new AABB(topCenter,halfSize),this.nodeCapacity), SW : new QuadTree(new AABB(leftCenter,halfSize),this.nodeCapacity), SE : new QuadTree(new AABB(this.boundary.center,halfSize),this.nodeCapacity)};
	}
	,getNodeCount: function() {
		var tmp = this.points.length;
		var tmp1;
		if(this.subtrees != null) {
			var tmp2 = this.subtrees;
			var tmp3 = tmp2 != null ? tmp2.NE.getNodeCount() : null;
			var tmp2 = this.subtrees;
			var tmp4 = tmp2 != null ? tmp2.NW.getNodeCount() : null;
			var tmp2 = this.subtrees;
			var tmp5 = tmp2 != null ? tmp2.SE.getNodeCount() : null;
			var tmp2 = this.subtrees;
			tmp1 = tmp3 + tmp4 + tmp5 + (tmp2 != null ? tmp2.SW.getNodeCount() : null);
		} else {
			tmp1 = 0;
		}
		return tmp + tmp1;
	}
	,insert: function(p,id) {
		if(!this.boundary.containsPoint(p)) {
			return false;
		}
		if(this.points.length < this.nodeCapacity && this.subtrees == null) {
			this.points.push(p);
			this.ids.push(id);
			return true;
		}
		if(this.subtrees == null) {
			this.subtrees = this.subdivide();
			var _g = 0;
			var _g1 = this.points.length;
			while(_g < _g1) {
				var i = _g++;
				var pt = this.points[i];
				var ptId = this.ids[i];
				if(!(this.subtrees.NW.insert(pt,ptId) || this.subtrees.NE.insert(pt,ptId) || this.subtrees.SW.insert(pt,ptId) || this.subtrees.SE.insert(pt,ptId))) {
					haxe_Log.trace("Couldn't insert point",{ fileName : "src/QuadTree.hx", lineNumber : 155, className : "QuadTree", methodName : "insert"});
				}
			}
			this.points = [];
			this.ids = [];
		}
		var _ok = this.subtrees.NW.insert(p,id) || this.subtrees.NE.insert(p,id) || this.subtrees.SW.insert(p,id) || this.subtrees.SE.insert(p,id);
		return true;
	}
	,queryRange: function(range,result) {
		if(!this.boundary.intersectsAABB(range)) {
			return;
		}
		if(this.subtrees == null) {
			var _g = 0;
			var _g1 = this.points.length;
			while(_g < _g1) {
				var i = _g++;
				var pt = this.points[i];
				var id = this.ids[i];
				if(range.containsPoint(pt)) {
					result.push({ point : pt, id : id});
				}
			}
			return;
		}
		this.subtrees.NW.queryRange(range,result);
		this.subtrees.NE.queryRange(range,result);
		this.subtrees.SW.queryRange(range,result);
		this.subtrees.SE.queryRange(range,result);
	}
	,toString: function() {
		var sb = [];
		var treeStack = [];
		treeStack.push({ tree : this, indent : 0});
		while(treeStack.length > 0) {
			var cur = treeStack.pop();
			var indent = StringTools.rpad("","-",cur.indent);
			sb.push("" + indent + "Tree " + cur.tree.boundary.toString());
			var _g = 0;
			var _g1 = cur.tree.points;
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				sb.push("" + indent + ">Point[" + pt.x + ", " + pt.y + "]");
			}
			if(cur.tree.subtrees != null) {
				treeStack.push({ tree : cur.tree.subtrees.SE, indent : cur.indent + 1});
				treeStack.push({ tree : cur.tree.subtrees.SW, indent : cur.indent + 1});
				treeStack.push({ tree : cur.tree.subtrees.NE, indent : cur.indent + 1});
				treeStack.push({ tree : cur.tree.subtrees.NW, indent : cur.indent + 1});
			}
		}
		return sb.join("\n");
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var sys_io_FileInput = function(fd) {
	this.hasReachedEof = false;
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = true;
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	throwEof: function() {
		this.hasReachedEof = true;
		throw haxe_Exception.thrown(new haxe_io_Eof());
	}
	,readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				this.hasReachedEof = true;
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
			throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
		}
		if(bytesRead == 0) {
			this.hasReachedEof = true;
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				this.hasReachedEof = true;
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
			throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
		}
		if(bytesRead == 0) {
			this.hasReachedEof = true;
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		this.hasReachedEof = false;
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.hasReachedEof;
	}
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = true;
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(b) {
		var buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__:true,__constructs__:null
	,SeekBegin: {_hx_name:"SeekBegin",_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_name:"SeekCur",_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_name:"SeekEnd",_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
sys_io_FileSeek.__constructs__ = [sys_io_FileSeek.SeekBegin,sys_io_FileSeek.SeekCur,sys_io_FileSeek.SeekEnd];
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Main.main();
})({});
